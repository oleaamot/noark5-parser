#!/usr/bin/python
# -*- coding: utf-8 -*-

"""

Connect to the REST API of a Noark 5 service to
export, import or verify Noark 5 archive files.

"""

# $Id$
#
# noark5-parser (Python)
#
# Copyright (C) 2018-2019  Ole Aamot
#
# Authors: Ole Aamot <ole@aamot.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
program = "noark5"
version = "0.2.1 (2019-02-15)"
git_url = "https://github.com/oleaamot/noark5-parser.git"

import sys
import inspect
import ctypes
sys.path.append('lib')
import argparse
import datetime
from hashlib import sha256
import base64
import json
import mechanize
import os
import re
from subprocess import call
from cgi import parse_qs, escape
import cgi
import urllib
import urllib2
import urllib3
import urlparse
import xmltodict
import xml.etree.ElementTree
import lxml
from lxml import builder
from lxml import etree

noarkrelbase = 'http://rel.kxml.no/noark5/v4/api/'
nikitarelbase = 'http://nikita.arkivlab.no/noark5/v4/'

class Noark5Parser:
        knownrels = [
        noarkrelbase + 'admin/administrativenhet/',
        noarkrelbase + 'admin/bruker/',
        noarkrelbase + 'admin/enhet/',
        noarkrelbase + 'admin/ny-administrativenhet/',
        noarkrelbase + 'admin/ny-bruker/',
        noarkrelbase + 'admin/ny-rettighet/',
        noarkrelbase + 'admin/rettighet/',
        noarkrelbase + 'arkivstruktur/',
        noarkrelbase + 'arkivstruktur/arkiv/',
        noarkrelbase + 'arkivstruktur/arkivdel/',
        noarkrelbase + 'arkivstruktur/arkivskaper/',
        noarkrelbase + 'arkivstruktur/basisregistrering/',
        noarkrelbase + 'arkivstruktur/bygning/',
        noarkrelbase + 'arkivstruktur/dokumentbeskrivelse/',
        noarkrelbase + 'arkivstruktur/dokumentobjekt/',
        noarkrelbase + 'arkivstruktur/elektronisksignatur/',
        noarkrelbase + 'arkivstruktur/fil/',
        noarkrelbase + 'arkivstruktur/hendelseslogg/',
        noarkrelbase + 'arkivstruktur/klasse/',
        noarkrelbase + 'arkivstruktur/klassifikasjonssystem/',
        noarkrelbase + 'arkivstruktur/konvertering/',
        noarkrelbase + 'arkivstruktur/kryssreferanse/',
        noarkrelbase + 'arkivstruktur/logg/',
        noarkrelbase + 'arkivstruktur/mappe/',
        noarkrelbase + 'arkivstruktur/matrikkel/',
        noarkrelbase + 'arkivstruktur/merknad/',
        noarkrelbase + 'arkivstruktur/nasjonaleidentifikator/',
        noarkrelbase + 'arkivstruktur/nasjonalidentifikator/',
        noarkrelbase + 'arkivstruktur/ny-arkiv/',
        noarkrelbase + 'arkivstruktur/ny-arkivdel/',
        noarkrelbase + 'arkivstruktur/ny-arkivskaper/',
        noarkrelbase + 'arkivstruktur/ny-basisregistrering/',
        noarkrelbase + 'arkivstruktur/ny-bygning/',
        noarkrelbase + 'arkivstruktur/ny-dokumentbeskrivelse/',
        noarkrelbase + 'arkivstruktur/ny-dokumentobjekt/',
        noarkrelbase + 'arkivstruktur/ny-elektronisksignatur/',
        noarkrelbase + 'arkivstruktur/ny-hendelseslogg/',
        noarkrelbase + 'arkivstruktur/ny-klasse/',
        noarkrelbase + 'arkivstruktur/ny-klassifikasjonssystem/',
        noarkrelbase + 'arkivstruktur/ny-konvertering/',
        noarkrelbase + 'arkivstruktur/ny-kryssreferanse/',
        noarkrelbase + 'arkivstruktur/ny-mappe/',
        noarkrelbase + 'arkivstruktur/ny-matrikkel/',
        noarkrelbase + 'arkivstruktur/ny-merknad/',
        noarkrelbase + 'arkivstruktur/ny-nasjonalidentifikator',
        noarkrelbase + 'arkivstruktur/ny-plan/',
        noarkrelbase + 'arkivstruktur/ny-posisjon/',
        noarkrelbase + 'arkivstruktur/ny-registrering/',
        noarkrelbase + 'arkivstruktur/plan/',
        noarkrelbase + 'arkivstruktur/posisjon/',
        noarkrelbase + 'arkivstruktur/registrering/',
        noarkrelbase + 'arkivstruktur/sekundaerklassifikasjons',
        noarkrelbase + 'arkivstruktur/underarkiv/',
        noarkrelbase + 'arkivstruktur/underklasse/',
        noarkrelbase + 'arkivstruktur/undermappe/',
        noarkrelbase + 'loggingogsporing/endringslogg/',
        noarkrelbase + 'loggingogsporing/ny-endringslogg/',
        noarkrelbase + 'metadata/arkivdelstatus/',
        noarkrelbase + 'metadata/arkivstatus/',
        noarkrelbase + 'metadata/avskrivningsmaate/',
        noarkrelbase + 'metadata/dokumentmedium/',
        noarkrelbase + 'metadata/dokumentstatus/',
        noarkrelbase + 'metadata/dokumenttype/',
        noarkrelbase + 'metadata/elektronisksignatursikkerhetsnivaa/',
        noarkrelbase + 'metadata/elektronisksignaturverifisert/',
        noarkrelbase + 'metadata/flytstatus/',
        noarkrelbase + 'metadata/format/',
        noarkrelbase + 'metadata/graderingskode/',
        noarkrelbase + 'metadata/hendelsetype/',
        noarkrelbase + 'metadata/journalposttype/',
        noarkrelbase + 'metadata/journalstatus/',
        noarkrelbase + 'metadata/kassasjonsvedtak/',
        noarkrelbase + 'metadata/klassifikasjonstype/',
        noarkrelbase + 'metadata/korrespondanseparttype/',
        noarkrelbase + 'metadata/land/',
        noarkrelbase + 'metadata/mappetype/',
        noarkrelbase + 'metadata/merknadstype/',
        noarkrelbase + 'metadata/moetedeltakerfunksjon/',
        noarkrelbase + 'metadata/moeteregistreringsstatus/',
        noarkrelbase + 'metadata/moeteregistreringstype/',
        noarkrelbase + 'metadata/moetesakstype/',
        noarkrelbase + 'metadata/postnummer/',
        noarkrelbase + 'metadata/presedensstatus/',
        noarkrelbase + 'metadata/sakspartrolle/',
        noarkrelbase + 'metadata/saksstatus/',
        noarkrelbase + 'metadata/skjermingdokument/',
        noarkrelbase + 'metadata/skjermingmetadata/',
        noarkrelbase + 'metadata/slettingstype/',
        noarkrelbase + 'metadata/tilgangskategori/',
        noarkrelbase + 'metadata/tilgangsrestriksjon/',
        noarkrelbase + 'metadata/tilknyttetregistreringsom/',
        noarkrelbase + 'metadata/variantformat/',
        noarkrelbase + 'sakarkiv/',
        noarkrelbase + 'sakarkiv/avskrivning/',
        noarkrelbase + 'sakarkiv/dokumentflyt/',
        noarkrelbase + 'sakarkiv/enkeladresse/',
        noarkrelbase + 'sakarkiv/journalpost/',
        noarkrelbase + 'sakarkiv/kontaktinformasjon/',
        noarkrelbase + 'sakarkiv/korrespondansepart/',
        noarkrelbase + 'sakarkiv/korrespondansepartenhet/',
        noarkrelbase + 'sakarkiv/korrespondansepartintern/',
        noarkrelbase + 'sakarkiv/korrespondansepartperson/',
        noarkrelbase + 'sakarkiv/ny-avskrivning/',
        noarkrelbase + 'sakarkiv/ny-dokumentflyt/',
        noarkrelbase + 'sakarkiv/ny-enkeladresse/',
        noarkrelbase + 'sakarkiv/ny-journalpost/',
        noarkrelbase + 'sakarkiv/ny-kontaktinformasjon/',
        noarkrelbase + 'sakarkiv/ny-korrespondansepart/',
        noarkrelbase + 'sakarkiv/ny-korrespondansepartenhet/',
        noarkrelbase + 'sakarkiv/ny-korrespondansepartintern/',
        noarkrelbase + 'sakarkiv/ny-korrespondansepartperson/',
        noarkrelbase + 'sakarkiv/ny-presedens/',
        noarkrelbase + 'sakarkiv/ny-saksmappe/',
        noarkrelbase + 'sakarkiv/ny-sakspart/',
        noarkrelbase + 'sakarkiv/ny-sakspartenhet/',
        noarkrelbase + 'sakarkiv/ny-sakspartperson/',
        noarkrelbase + 'sakarkiv/presedens/',
        noarkrelbase + 'sakarkiv/sak/',
        noarkrelbase + 'sakarkiv/saksmappe/',
        noarkrelbase + 'sakarkiv/sakspart/',
        noarkrelbase + 'sakarkiv/sakspartenhet/',
        noarkrelbase + 'sakarkiv/saksparter/',
        noarkrelbase + 'sakarkiv/sakspartperson/',
        noarkrelbase + 'sakarkiv/sekundaerklassifikasjon/',
        'self',
    ]
        def __init__(self):
                baseurl = 'http://localhost:8092/noark5v4/'
                filename = 'arkivstruktur.xml'
                username = 'root@localhost';
                password = 'password';
                refurl = 'http://n5test.kxml.no/api/'
                parser = argparse.ArgumentParser()
                parser.add_argument("--baseurl", help="(default is %s)" % baseurl)
                parser.add_argument("--filename", help="(default is %s)" % filename)
                parser.add_argument("--username", help="(default is %s)" % username)
                parser.add_argument("--password", help="(default is %s)" % password)
                parser.add_argument("--reference", help="set baseurl to to demo API site (override --baseurl)",
                action="store_true")
                parser.add_argument("--verbose", help="enable debug output",
                                    action="store_true")
                parser.add_argument("--keep", help="do not delete created objects",
                                    action="store_true")
                args = parser.parse_args()
                if args.reference:
                        args.baseurl = refurl
                        if args.baseurl:
                                self.baseurl = args.baseurl
                        if args.filename:
                                self.filename = args.filename
                        if args.username:
                                self.username = args.username
                        if args.password:
                                self.password = args.password
                        else:
                                self.baseurl = baseurl
                                self.created = []
                                self.verbose = args.verbose
                                self.keeptestdata = args.keep
                                self.failures = {}
                                self.xfailures = {}
                                self.successes = {}
        def noark5_export(self):
                print ('noark5-parser' + ' ' + version + ' ' + git_url)
                print ('\nExporting Noark 5 structure from network to disk...')

        def noark5_import(self):
                print ('noark5-parser' + ' ' + version + ' ' + git_url)
                print ('\nImporting Noark 5 structure from disk to network...')

        def noark5_verify(self):
                print ('noark5-parser' + ' ' + version + ' ' + git_url)
                print ('\nVerifying Noark 5 structure on disk from network...')

class LoginFailure(RuntimeError):
    """Report a login failure"""
    pass

class XMLNamespace:
          noark = "http://www.arkivverket.no/standarder/noark5/arkivstruktur"
          xsi = "http://www.w3.org/2001/XMLSchema-instance"
          n5mdk = "http://www.arkivverket.no/standarder/noark5/metadatakatalog"

class Endpoint:
    def __init__(self, baseurl):
        self.baseurl = baseurl
        self._browser = mechanize.Browser()
        self.verbose = False
    def expandurl(self, path):
#        print(self.baseurl, path)
        if path is None:
            raise ValueError("asked to expand undefined URL path")
        url = urlparse.urljoin(self.baseurl, path)
        return url
    def login(self, username = None, password = None):
        baserel = "http://nikita.arkivlab.no/noark5/v4"
        url7519 = self.findRelation("%s/login/rfc7519/" % baserel)
        url6749 = self.findRelation("%s/login/rfc6749/" % baserel)
        if url7519 is not None:
            url = url7519
            try:
                if username is None:
                    username = 'admin'
                if password is None:
                    password = 'password'
                data = {
                    'username': username,
                    'password': password,
                }
                jsondata = json.dumps(data)
                (c,r) = self.post(url, jsondata, 'application/json')
            except urllib2.HTTPError as e:
                raise LoginFailure("Posting to login relation %s failed: %s" % (url, e))
            j = json.loads(c)
            self.token = j['token']
        elif url6749 is not None:
            url = url6749
            try:
                if username is None:
                    username = 'admin@example.com'
                if password is None:
                    password = 'password'
                data = {
                    'grant_type': 'password',
                    'username': username,
                    'password': password,
                }
                datastr = urllib.urlencode(data)
                a = '%s:%s' % ('nikita-client', 'secret')
                self.token = 'Basic %s' % base64.encodestring(a).strip()
                (c,r) = self.post(url, datastr, 'application/x-www-form-urlencoded')
            except urllib2.HTTPError as e:
                raise LoginFailure("Posting to login relation %s failed: %s (%s)" % (url, str(e), e.read()))
            j = json.loads(c)
            self.token = "%s %s" % (j['token_type'], j['access_token'])
        else:
            raise LoginFailure("Unable to find login relation")

    def findRelation(self, relation):
        """
Recursively look for relation in API.
"""
        if 'self' == relation: # Do not make sense to look for self relations
            return None
        urlsleft = ['.']
        urlseen = {}
        while 0 < len(urlsleft):
            url = urlsleft.pop(0)
            if url in urlseen:
                continue
            urlseen[url] = 1
            try:
                (content, res) = self.json_get(url)
                ctype = res.info().getheader('Content-Type')
                if 0 == ctype.find('application/vnd.noark5-v4+json'):
                    baseref = json.loads(content)
                    #print "J:", baseref
                    if type(baseref) is list:
                        pass # Ignore lists
                    elif '_links' in baseref:
                        for l in baseref['_links']:
                            if 'href' in l:
                                href = l['href']
                                if href not in urlseen:
                                    urlsleft.append(href)
                                if 'rel' in l and l['rel'] != 'self' and \
                                   l['rel'] == relation:
                                   return href
                    else:
                        pass # ignore URLs without _links
            except urllib2.HTTPError as e:
                # Ignore errors from GET, we only try to locate links, not detect problems.
                pass

    def post(self, path, data, mimetype, length=None):
        url = self.expandurl(path)
        if length is None:
            length = len(data)
        headers = {
            'Accept' : 'application/vnd.noark5-v4+json',
            'Content-Type': mimetype,
            'Content-Length' : length,
        }
        if hasattr(self, 'token'):
            headers['Authorization'] = self.token
        if self.verbose:
            print("POST %s: %s" % (url, headers))
        request = urllib2.Request(url, data, headers)
        response = self._browser.open(request)
        content = response.read()
        if self.verbose:
            print(content)
        return (content, response)

    def json_post(self, path, data):
        jsondata = json.dumps(data)
        return self.post(path, jsondata, 'application/vnd.noark5-v4+json')

    def put(self, path, data, mimetype, length=None, etag=None):
        url = self.expandurl(path)
        if length is None:
            length = len(data)
        headers = {
            'Accept' : 'application/vnd.noark5-v4+json',
            'Content-Type': mimetype,
            'Content-Length' : length,
        }
        if hasattr(self, 'token'):
            headers['Authorization'] = self.token
        if etag is not None:
            headers['ETag'] = etag
        if self.verbose:
            print("PUT %s: %s" % (url, headers))
        if self.verbose:
            print(headers)
        request = urllib2.Request(url, data, headers)
        request.get_method = lambda: 'PUT'
        response = self._browser.open(request)
        content = response.read()
        if self.verbose:
            print(content)
        return (content, response)

    def _get(self, path, headers = None):
        url = self.expandurl(path)
        if self.verbose:
            print("GET %s" % url)
        if headers is None:
            headers = {}
        if hasattr(self, 'token'):
            headers['Authorization'] = self.token
        request = urllib2.Request(url, None, headers)
        response = self._browser.open(request)
        content = response.read()
        if self.verbose:
            print(content)
        return (content, response)

    def json_get(self, path):
        headers = {
            'X_REQUESTED_WITH' :'XMLHttpRequest',
            'Accept' : 'application/json, application/vnd.noark5-v4+json, text/javascript, */*; q=0.01',
            }
        return self._get(path, headers)

    def xml_get(self, path):
        headers = {
            'Accept' : 'application/vnd.noark5-v4+xml',
        }
        return self._get(path, headers)

    def options(self, path):
        url = self.expandurl(path)
        opener = urllib2.build_opener(urllib2.HTTPHandler)
        request = urllib2.Request(url)
        request.get_method = lambda: 'OPTIONS'
        response = opener.open(request)
        content = response.read()
        return (content, response)

    def delete(self, path, headers = None):
        url = self.expandurl(path)
        opener = urllib2.build_opener(urllib2.HTTPHandler)
        if headers is None:
            headers = {}
        if hasattr(self, 'token'):
            headers['Authorization'] = self.token
        request = urllib2.Request(url, None, headers)
        request.get_method = lambda: 'DELETE'
        response = opener.open(request)
        content = response.read()
        return (content, response)

if __name__ == '__main__':
  t = Noark5Parser()
  stack = inspect.stack()
  dummydato = '1970-01-01T00:00:00'
  E = lxml.builder.ElementMaker(
          nsmap={
                  None: XMLNamespace.noark,
                  'xsi': XMLNamespace.xsi,
                  'n5mdk': XMLNamespace.n5mdk,
          }
  )

  for s in stack:
    if s[1] == "./noark5-export":
      p = Endpoint("https://nikita.hioa.no/noark5v4/")
      t.noark5_export
      p.login("root@localhost", "password")
      baserel = "https://nikita.hioa.no/noark5v4/hateoas-api"
      arkiv_p = p.json_get("%s/arkivstruktur/arkiv/" % baserel)
      print (arkiv_p)
      i = 0
      arkiv_v = json.loads(arkiv_p[i])
      print (arkiv_v['results'][i]['systemID'])
      for arkivref in arkiv_v['results']:
              arkivskaper_p = p.json_get("%s/arkivstruktur/arkivskaper/" % baserel)
              arkivskaper_v = json.loads(arkivskaper_p[0])
              print (arkivskaper_v['results'][i]['arkivskaperID'])

              arkiv = E.arkiv(
                      E.systemID(arkiv_v['results'][i]['systemID']),
                      E.tittel(arkiv_v['results'][i]['tittel']),
                      E.beskrivelse(arkiv_v['results'][i]['beskrivelse']),
                      E.arkivstatus(arkiv_v['results'][i]['arkivstatus']), # FIXME or 'Avsluttet'
                      E.dokumentmedium(arkiv_v['results'][i]['dokumentmedium']),
#                      E.oppbevaringssted(arkiv_v['results'][i]['oppbevaringssted']),
                      E.opprettetDato(arkiv_v['results'][i]['opprettetDato']),
                      E.opprettetAv(arkiv_v['results'][i]['opprettetAv']),
#                      E.avsluttetDato(arkiv_v['results'][i]['avsluttetDato']),
#                      E.avsluttetAv(arkiv_v['results'][i]['avsluttetAv']),
                      E.arkivskaper(
                              E.arkivskaperID(arkivskaper_v['results'][i]['arkivskaperID']),
                              E.arkivskaperNavn(arkivskaper_v['results'][i]['arkivskaperNavn']),
                              E.beskrivelse(arkivskaper_v['results'][i]['beskrivelse']),
                      ),
              )
              i = i + 1
              arkivdel_p = p.json_get("%s/arkivstruktur/arkivdel/" % baserel)
              arkivdel_v = json.loads(arkivdel_p[0])
#              print (arkivdel)
              j = 0
              for arkivdelref in arkivdel_v['results']:
                      arkivdel = E.arkivdel(
                              E.systemID(arkivdel_v['results'][j]['systemID']),
                              E.tittel(arkivdel_v['results'][j]['tittel']),
                              E.beskrivelse(arkivdel_v['results'][j]['beskrivelse']),
                              E.arkivdelstatus(arkivdel_v['results'][j]['arkivdelstatus']), # FIXME
                              E.dokumentmedium(arkivdel_v['results'][j]['dokumentmedium']),
#                              E.oppbevaringssted(arkivdel_v['results'][j]['oppbevaringssted']),
                              E.opprettetDato(arkivdel_v['results'][j]['opprettetDato']),
                              E.opprettetAv(arkivdel_v['results'][j]['opprettetAv']),
#                              E.avsluttetDato(arkivdel_v['results'][j]['avsluttetDato']),
#                              E.avsluttetAv(arkivdel_v['results'][j]['avsluttetAv']),
#                              E.arkivperiodeStartDato(arkivdel_v['results'][j]['arkivperiodeStartDato']),
#                              E.arkivperiodeSluttDato(arkivdel_v['results'][j]['arkivperiodeSluttDato']),
                      )
                      j = j + 1
                      k = 0
                      klassifikasjonssystem_p = p.json_get("%s/arkivstruktur/klassifikasjonssystem/" % baserel)
                      klassifikasjonssystem_v = json.loads(klassifikasjonssystem_p[0])
                      for klassifikasjonssystemref in klassifikasjonssystem_v['results']:
                              print (klassifikasjonssystem_p)
                              klassifikasjonssystem = E.klassifikasjonssystem(
                                      E.systemID(klassifikasjonssystem_v['results'][k]['systemID']),
                              )
                              k = k + 1
                      mappe_p = p.json_get("%s/arkivstruktur/mappe/" % baserel)
                      mappe_v = json.loads(mappe_p[0])
                      m = 0
                      for mapperef in mappe_v['results']:
                              print (mappe_p)
                              mappe = E.mappe(
                                      E.systemID(mappe_v['results'][m]['systemID']),
                                      E.mappeID(mappe_v['results'][m]['mappeID']),
                                      E.tittel(mappe_v['results'][m]['tittel']),
                                      E.opprettetDato(mappe_v['results'][m]['opprettetDato']),
                                      E.opprettetAv(mappe_v['results'][m]['opprettetAv']),
#                                      E.avsluttetDato(mappe_v['results'][m]['avsluttetDato']),
#                                      E.avsluttetAv(mappe_v['results'][m]['avsluttetAv']),
                              )
                              m = m + 1
                              reg = E.registrering(
                                      E.systemID('registrering'),
                                      # The event information was archived when it was created
                                      E.opprettetDato('Created'),
                                      E.opprettetAv('Creator'),
                                      E.arkivertDato('Created'),
                                      E.arkivertAv('Creator'),
                              )
                              db = E.dokumentbeskrivelse(
                                      E.systemID(''),
                                      E.dokumenttype(''),
                                      E.dokumentstatus('Dokumentet er ferdigstilt'),
                                      E.tittel('Tittel'),
                                      E.opprettetDato(dummydato),
                                      E.opprettetAv(''),
                                      E.tilknyttetRegistreringSom('Hoveddokument'), # FIXME
                                      E.dokumentnummer('Dokumentnummer'),
                                      E.tilknyttetDato(dummydato),
                                      E.tilknyttetAv(''),
                                      E.dokumentobjekt(
                                              E.versjonsnummer('1'),
                                              E.variantformat('Produksjonsformat'),
                                              E.format('format'),
                                              E.opprettetDato(dummydato),
                                              E.opprettetAv(''),
                                              E.referanseDokumentfil('dokumentfil'),
                                              E.sjekksum('sha256'),
                                              E.sjekksumAlgoritme('SHA-256'),
                                              E.filstoerrelse(str('filesize')),
                                      ),
                              )
                              reg.append(db)
                              # tags for basisregistrering must come after <dokumentbeskrivelse>
                              reg.append(E.registreringsID('id'))
                              reg.append(E.tittel('Description'))
                              mappe.append(reg)
#                              klassifikasjonssystem.append(reg)
                              arkivdel.append(mappe)
                              arkiv.append(arkivdel)

      with open('arkivstruktur.xml', 'w') as f:
              f.write(lxml.etree.tostring(arkiv,
                                          pretty_print=True,
                                          xml_declaration=True,
                                          encoding='UTF-8'))
              #saksmappe = p.json_get("%s/sakarkiv/saksmappe/" % baserel)
              #print (saksmappe)
              #journalpost = p.json_get("%s/sakarkiv/journalpost/" % baserel)
              # print (journalpost)
              #  dokumentbeskrivelse = p.json_get("%s/arkivstruktur/dokumentbeskrivelse/" % baserel)
              #   print (dokumentbeskrivelse)
              #    dokumentobjekt = p.json_get("%s/arkivstruktur/dokumentobjekt/" % baserel)
              #     print (dokumentobjekt)
    if s[1] == "./noark5-import":
      p = Endpoint("https://arkivarium.no/noark5v4/")
      t.noark5_import
      p.login("root@localhost", "password")
      baserel = "https://arkivarium.no/noark5v4/hateoas-api"
      ny_arkiv_p = p.json_get("%s/arkivstruktur/ny-arkiv/" % baserel)
      print ny_arkiv_p
      with open('arkivstruktur.xml', 'r') as f:
              arkivet = f.read()
              root = etree.fromstring(arkivet);
              o = xmltodict.parse(arkivet)
              jd = json.dumps(o)
              dd = json.loads(jd)
#              print dd
#              print dd['arkiv']['tittel']
#              print dd['arkiv']['arkivskaper']
    #          arkiv = p.json_post("%s/arkivstruktur/ny-arkiv/" % baserel, '{}');
     #         print arkiv

              try:
                      print("GET %s/arkivstruktur/ny-arkiv/" % baserel)
                      (arkiv_gc, gres) = p.json_get("%s/arkivstruktur/ny-arkiv/" % baserel)
                      default_arkiv = json.loads(arkiv_gc)
                      arkivdata = {};
                      for k in default_arkiv.keys():
                              if not k == '_links' and k not in arkivdata:
                                      arkivdata[k] = default_arkiv[k]
                      print("GET %s/arkivstruktur/ny-arkivskaper/" % baserel)
                      (arkivskaper_gc, gres) = p.json_get("%s/arkivstruktur/ny-arkivskaper/" % baserel)
                      default_arkivskaper = json.loads(arkivskaper_gc)
                      arkivskaperdata = {};
                      for k in default_arkivskaper.keys():
                              if not k == '_links' and k not in arkivskaperdata:
                                      arkivskaperdata[k] = default_arkivskaper[k]
              except urllib2.HTTPError, e:
                      pass
              try:
                      arkivgrid = {};
                      arkivdelgrid = {};
                      arkivskapergrid = {};

                      for key in arkivdata:
                              print dd['arkiv'][key]
                              arkivgrid[key] = dd['arkiv'][key]
                      print("POST: %s" % arkivgrid)
                      (c, res) = p.json_post("%s/arkivstruktur/ny-arkiv/" % baserel, arkivgrid)

                      for key in arkivskaperdata:
                              print dd['arkiv']['arkivskaper'][key]
                              arkivskapergrid[key] = dd['arkiv']['arkivskaper'][key]
                      print("POST: %s" % arkivskapergrid)
                      (c, res) = p.json_post("%s/arkivstruktur/ny-arkivskaper/" % baserel, arkivskapergrid)

              except urllib2.HTTPError, e:
                      raise
              #              arkiv = root.findall('arkivdel')
      t.noark5_export
    if s[1] == "./noark5-verify":
      t.noark5_verify
exit()
